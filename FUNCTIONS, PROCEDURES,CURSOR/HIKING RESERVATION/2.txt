CREATE OR REPLACE TRIGGER TIPKT.RESTRICT_SLOTS
   BEFORE INSERT OR UPDATE OF SLOTS
   ON TIPKT.HIKE_RESERVATION_LIST
   FOR EACH ROW
BEGIN
   IF   :NEW.SLOTS <0   
  
   THEN
      RAISE_APPLICATION_ERROR(-20202, 'NO SLOT AVAILABLE');
   
   END IF;
   END;


____________________________________________________

CREATE OR REPLACE TRIGGER TIPKT.RESTRICT_SLOTS2
   BEFORE INSERT OR UPDATE OF NUM_OF_JOINERS
   ON TIPKT.HIKE_RESERVATION
   FOR EACH ROW
BEGIN
   IF   :NEW.NUM_OF_JOINERS <= 0  
  
   THEN
      RAISE_APPLICATION_ERROR(-20202, 'INVALID INPUT!');
      
      ELSIF :NEW.NUM_OF_JOINERS >10
    THEN
      RAISE_APPLICATION_ERROR(-20202, 'Sorry, limited slots only.');
  
      
   END IF;

__________________________________________________

CREATE OR REPLACE PROCEDURE HIKE_RESERVE_LIST_INSERT (
   V_NAME              VARCHAR,
   V_AGE               NUMBER,
   V_SEX               VARCHAR,
   V_NUM_OF_JOINERS    NUMBER,
   V_MOUNTAIN_PICK     VARCHAR,
   V_DATE_OF_HIKE      VARCHAR,
   V_DOWNPAYMENT       VARCHAR,
   V_STATUS            VARCHAR)
IS
BEGIN
   INSERT INTO HIKE_RESERVATION
        VALUES (V_NAME,
                V_AGE,
                V_SEX,
                V_NUM_OF_JOINERS,
                V_MOUNTAIN_PICK,
                V_DATE_OF_HIKE,
                V_DOWNPAYMENT,
                V_STATUS);

   COMMIT;

   IF V_DOWNPAYMENT = 'N'
   THEN
      DBMS_OUTPUT.PUT_LINE (
         'We can''t confirm your slot yet. 
          You have to pay a deposit in order to secure your slot. THANK YOU!');
          
         UPDATE HIKE_RESERVATION
         SET NUM_OF_JOINERS= V_NUM_OF_JOINERS
       WHERE NAME= V_NAME;
      
      COMMIT;
   ELSIF V_DOWNPAYMENT = 'Y'
   THEN
        UPDATE HIKE_RESERVATION
        SET STATUS= 'CONFIRMED'
        WHERE NAME= V_NAME;
      DBMS_OUTPUT.PUT_LINE ('You''ve confirmed your slot.');
      COMMIT;
      UPDATE HIKE_RESERVATION_LIST
         SET SLOTS = SLOTS - V_NUM_OF_JOINERS
       WHERE MOUNTAIN = V_MOUNTAIN_PICK;
     COMMIT;
   END IF;
END;

_____________________________________________________

CREATE OR REPLACE PROCEDURE TIPKT.HIKE_RESERVE_LIST_UPDATE3 (
   UPDATE_NAME       VARCHAR,
   UPDATE_COL        VARCHAR,
   UPDATE_COL_VAL    VARCHAR)
IS
   V_NUM_OF_JOINERS   NUMBER;
   V_MOUNTAIN_PICK    VARCHAR (30);
BEGIN
   IF UPDATE_COL = 'MOUNTAIN_PICK'
   THEN
      UPDATE HIKE_RESERVATION
         SET MOUNTAIN_PICK = UPDATE_COL_VAL
       WHERE NAME = UPDATE_NAME;
       
   ELSIF UPDATE_COL = 'DATE_OF_HIKE'
   THEN
      UPDATE HIKE_RESERVATION
         SET DATE_OF_HIKE = UPDATE_COL_VAL
       WHERE NAME = UPDATE_NAME;
       
   ELSIF UPDATE_COL = 'NUM_OF_JOINERS'
   THEN
      UPDATE HIKE_RESERVATION
         SET NUM_OF_JOINERS = UPDATE_COL_VAL
       WHERE NAME = UPDATE_NAME;
   ELSIF UPDATE_COL = 'DOWNPAYMENT'
   THEN
      UPDATE HIKE_RESERVATION
         SET DOWNPAYMENT = 'Y', STATUS = 'CONFIRMED'
       WHERE NAME = UPDATE_NAME;

      SELECT NUM_OF_JOINERS, MOUNTAIN_PICK
        INTO V_NUM_OF_JOINERS, V_MOUNTAIN_PICK
        FROM HIKE_RESERVATION
       WHERE NAME = UPDATE_NAME;


      UPDATE HIKE_RESERVATION_LIST
         SET SLOTS = SLOTS - V_NUM_OF_JOINERS
       WHERE MOUNTAIN = V_MOUNTAIN_PICK;
   END IF;

   COMMIT;
END;