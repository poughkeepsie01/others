CREATE OR REPLACE PROCEDURE HIKE_RESERVE_LIST_INSERT (
   V_NAME              HIKE_RESERVATION.NAME%TYPE,
   V_AGE               HIKE_RESERVATION.AGE%TYPE,
   V_GENDER            HIKE_RESERVATION.GENDER%TYPE,
   V_NUM_OF_JOINERS    HIKE_RESERVATION.NUM_OF_JOINERS%TYPE,
   V_MOUNTAIN_PICK     HIKE_RESERVATION.MOUNTAIN_PICK%TYPE)
IS
   V_MT_ID          HIKE_RESERVATION_LIST.MT_ID%TYPE;
   INVALID_GENDER   EXCEPTION;
   INVALID_AGE      EXCEPTION;
BEGIN
   SELECT MT_ID
     INTO V_MT_ID
     FROM HIKE_RESERVATION_LIST
    WHERE MT_ID = V_MOUNTAIN_PICK;


   IF V_MT_ID != V_MOUNTAIN_PICK
   THEN
      RAISE NO_DATA_FOUND;
   ELSIF V_GENDER NOT IN ('F', 'M')
   THEN
      RAISE INVALID_GENDER;
   ELSIF V_AGE NOT BETWEEN 18 AND 70
   THEN
      RAISE INVALID_AGE;
   ELSE
      INSERT INTO HIKE_RESERVATION
           VALUES (TRANSAC_NUM.NEXTVAL,
                   V_NAME,
                   V_AGE,
                   V_GENDER,
                   V_NUM_OF_JOINERS,
                   V_MOUNTAIN_PICK,
                   NULL,
                   NULL,
                   SYSDATE,
                   NULL);

      COMMIT;
      DBMS_OUTPUT.PUT_LINE ('New record inserted.');
   END IF;

   UPDATE HIKE_RESERVATION
      SET STATUS = 'JOINED'
    WHERE MOUNTAIN_PICK = V_MOUNTAIN_PICK;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RAISE_APPLICATION_ERROR (-20000, 'No mountain found.');
   WHEN INVALID_GENDER
   THEN
      RAISE_APPLICATION_ERROR (-20000, 'Gender input is invalid.');
   WHEN INVALID_AGE
   THEN
      RAISE_APPLICATION_ERROR (-20000,
                               'Adults aged 18 to 70 can only register.');
END;